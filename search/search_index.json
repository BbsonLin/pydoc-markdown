{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[April 23, 2019] The current version of Pydoc-Markdown (2.x) is not actively developed. Efforts are focused on Pydoc-markdown 3.x which can be found on the develop . pydocmd \u2013 insipired by the Keras Documentation Pydocmd uses MkDocs and extended Markdown syntax to generate beautiful Python API documentation. Todo [x] Support + suffix to include documented members of a module/class [ ] Expand and link cross-references (eg. #SomeClass ) [ ] Parse, format and link types listed in parameter/member/raise/return type docstrings (eg. someattr (int): This is... ) Installation pip install pydoc-markdown pip install git+https://github.com/NiklasRosenstein/pydoc-markdown.git # latest development version Usage Pydocmd can generate plain Markdown files from Python modules using the pydocmd simple command. Specify one or more module names on the command-line. Supports the + syntax to include members of the module (or ++ to include members of the members, etc.) pydocmd simple mypackage+ mypackage.mymodule+ > docs.md Alternatively, pydocmd wraps the MkDocs command-line interface and generates the markdown pages beforehand. Simply use pydocmd build to build the documentation, or pydocmd serve to serve the documentation on a local HTTP server. The pydocmd gh-deploy from MkDocs is also supported. A configuration file pydocmd.yml is required to use pydocmd in this mode. Below is an example configuration. To get started, create docs/ directory and a file pydocmd.yml inside of it. Copy the configuration below and adjust it to your needs, then run pydocmd build from the docs/ directory. site_name: \"My Documentation\" # This tells pydocmd which pages to generate from which Python modules, # functions and classes. At the first level is the page name, below that # is a tree of Python member names (modules, classes, etc.) that should be # documented. Higher indentation leads to smaller header size. generate: - baz/cool-stuff.md: - foobar.baz: - foobar.baz.CoolClass+ # (+ to include members) - foobar.baz.some_function - baz/more-stuff.md: - foobar.more++ # (++ to include members, and their members) # MkDocs pages configuration. The `<<` operator is sugar added by pydocmd # that allows you to use an external Markdown file (eg. your project's README) # in the documentation. The path must be relative to current working directory. # This configuration is not mandatory if you have your own mkdocs.yml config file. pages: - Home: index.md << ../README.md - foobar.baz: - Cool Stuff: baz/cool-stuff.md # These options all show off their default values. You don't have to add # them to your configuration if you're fine with the default. docs_dir: sources gens_dir: _build/pydocmd # This will end up as the MkDocs 'docs_dir' site_dir: _build/site theme: readthedocs loader: pydocmd.loader.PythonLoader preprocessor: pydocmd.preprocessors.simple.Preprocessor # Whether to output headers as markdown or HTML. Used to workaround # https://github.com/NiklasRosenstein/pydoc-markdown/issues/11. The default is # to generate HTML with unique and meaningful id tags, which can't be done with # markdown. # # Note: if using the simple generator mode, this will default to 'markdown' # instead of 'html'. headers: html # Additional search path for your Python module. If you use Pydocmd from a # subdirectory of your project (eg. docs/), you may want to add the parent # directory here. additional_search_paths: - .. Syntax Cross-references Symbols in the same namespace may be referenced by using a hash-symbol ( # ) directly followed by the symbols' name, including relative references. Note that using parentheses for function names is encouraged and will be ignored and automatically added when converting docstrings. Examples: #ClassName.member or #mod.function() . For absolute references for modules or members in names that are not available in the current global namespace, #::mod.member must be used (note the two preceeding two double-colons). For long reference names where only some part of the name should be displayed, the syntax #X~some.reference.name can be used, where X is the number of elements to keep. If X is omitted, it will be assumed 1. Example: #~some.reference.name results in only name being displayed. In order to append additional characters that are not included in the actual reference name, another hash-symbol can be used, like #Signal#s . Sections Sections can be generated with the Markdown # <Title> syntax. It is important to add a whitespace after the hash-symbol ( # ), as otherwise it would represent a cross-reference. Some special sections alter the rendered result of their content, including Arguments (1) Parameters (1) Attributes (1) Members (1) Raises (2) Returns (2) (1): Lines beginning with <ident> [(<type>[, ...])]: are treated as argument/parameter or attribute/member declarations. Types listed inside the parenthesis (optional) are cross-linked, if possible. For attribute/member declarations, the identifier is typed in a monospace font. (2): Lines beginning with <type>[, ...]: are treated as raise/return type declarations and the type names are cross-linked, if possible. Lines following a name's description are considered part of the most recent documentation unless separated by another declaration or an empty line. <type> placeholders can also be tuples in the form (<type>[, ...]) . Code Blocks GitHub-style Markdown code-blocks with language annotations can be used. ```python >>> for i in range(100): ... ``` Changes v2.1.0 (2020-03-01) Use yaml.safe_load() instead of yaml.load() to silence warning about unsafe operation (#87) 65 \u2013 Properly loaded docstring for classmethod/staticmethod. 62 \u2013 getting descriptor's instance instead calling its get method. 61 \u2013 'pages' configuration is deprecated in MKDocs > 1.0.0. MKDoc dependency bumped to >=1.0.0. 63 \u2013 Pages configuration not required when mkdocs.yml present. Add newline before titles for plaintext visibility Arguments/Returns section is considered ended if an empty line is found Parse references and replace them with markdown links Pretty print function signature Add smart and google preprocessors v2.0.5 (2018-11-15) Now copies all files from the docs_dir (to include images etc.) (see #56) Fix error with delayed imports changing dictionary size during iteration (see #57) Add headers option which can be of value 'html' or 'markdown' (see #55) Default headers option to 'markdown' in simple mode (see #59) v2.0.4 (2018-07-24) Add -c key=value argument for generate and simple command Add filter=[\"docstring\"] option (#43) Fix regex for detecting cross-references (#44) Handle classes that don't define __init__() (PR#51) Add support for reStructuredText Markup (eg. :class:`MyClass` ) (PR#46, #1) Handle @property functions (PR#50) v2.0.3 Fix #41, #36, #31 Merged #39 v2.0.2 Fix #25 -- Text is incorrectly rendered as code Fix #26 -- Broken links for URLs with fragment identifiers No longer transforms titles in a docstring that are indented (eg. to avoid an indented code block with a # comment to be corrupted) v2.0.1 Support additional_search_path key in configuration Render headers as HTML <hX> tags rather than Markdown tags, so we assign a proper ID to them Fix #21 -- AttributeError: 'module' object has no attribute 'signature' Now requires the six module FIx #22 -- No blank space after header does not render codeblocks v2.0.0 Complete overhaul of pydoc-markdown employing MkDocs and the Markdown module. Copyright \u00a9 2017-2018 Niklas Rosenstein","title":"Home"},{"location":"#pydocmd","text":"\u2013 insipired by the Keras Documentation Pydocmd uses MkDocs and extended Markdown syntax to generate beautiful Python API documentation. Todo [x] Support + suffix to include documented members of a module/class [ ] Expand and link cross-references (eg. #SomeClass ) [ ] Parse, format and link types listed in parameter/member/raise/return type docstrings (eg. someattr (int): This is... )","title":"pydocmd"},{"location":"#installation","text":"pip install pydoc-markdown pip install git+https://github.com/NiklasRosenstein/pydoc-markdown.git # latest development version","title":"Installation"},{"location":"#usage","text":"Pydocmd can generate plain Markdown files from Python modules using the pydocmd simple command. Specify one or more module names on the command-line. Supports the + syntax to include members of the module (or ++ to include members of the members, etc.) pydocmd simple mypackage+ mypackage.mymodule+ > docs.md Alternatively, pydocmd wraps the MkDocs command-line interface and generates the markdown pages beforehand. Simply use pydocmd build to build the documentation, or pydocmd serve to serve the documentation on a local HTTP server. The pydocmd gh-deploy from MkDocs is also supported. A configuration file pydocmd.yml is required to use pydocmd in this mode. Below is an example configuration. To get started, create docs/ directory and a file pydocmd.yml inside of it. Copy the configuration below and adjust it to your needs, then run pydocmd build from the docs/ directory. site_name: \"My Documentation\" # This tells pydocmd which pages to generate from which Python modules, # functions and classes. At the first level is the page name, below that # is a tree of Python member names (modules, classes, etc.) that should be # documented. Higher indentation leads to smaller header size. generate: - baz/cool-stuff.md: - foobar.baz: - foobar.baz.CoolClass+ # (+ to include members) - foobar.baz.some_function - baz/more-stuff.md: - foobar.more++ # (++ to include members, and their members) # MkDocs pages configuration. The `<<` operator is sugar added by pydocmd # that allows you to use an external Markdown file (eg. your project's README) # in the documentation. The path must be relative to current working directory. # This configuration is not mandatory if you have your own mkdocs.yml config file. pages: - Home: index.md << ../README.md - foobar.baz: - Cool Stuff: baz/cool-stuff.md # These options all show off their default values. You don't have to add # them to your configuration if you're fine with the default. docs_dir: sources gens_dir: _build/pydocmd # This will end up as the MkDocs 'docs_dir' site_dir: _build/site theme: readthedocs loader: pydocmd.loader.PythonLoader preprocessor: pydocmd.preprocessors.simple.Preprocessor # Whether to output headers as markdown or HTML. Used to workaround # https://github.com/NiklasRosenstein/pydoc-markdown/issues/11. The default is # to generate HTML with unique and meaningful id tags, which can't be done with # markdown. # # Note: if using the simple generator mode, this will default to 'markdown' # instead of 'html'. headers: html # Additional search path for your Python module. If you use Pydocmd from a # subdirectory of your project (eg. docs/), you may want to add the parent # directory here. additional_search_paths: - ..","title":"Usage"},{"location":"#syntax","text":"","title":"Syntax"},{"location":"#cross-references","text":"Symbols in the same namespace may be referenced by using a hash-symbol ( # ) directly followed by the symbols' name, including relative references. Note that using parentheses for function names is encouraged and will be ignored and automatically added when converting docstrings. Examples: #ClassName.member or #mod.function() . For absolute references for modules or members in names that are not available in the current global namespace, #::mod.member must be used (note the two preceeding two double-colons). For long reference names where only some part of the name should be displayed, the syntax #X~some.reference.name can be used, where X is the number of elements to keep. If X is omitted, it will be assumed 1. Example: #~some.reference.name results in only name being displayed. In order to append additional characters that are not included in the actual reference name, another hash-symbol can be used, like #Signal#s .","title":"Cross-references"},{"location":"#sections","text":"Sections can be generated with the Markdown # <Title> syntax. It is important to add a whitespace after the hash-symbol ( # ), as otherwise it would represent a cross-reference. Some special sections alter the rendered result of their content, including Arguments (1) Parameters (1) Attributes (1) Members (1) Raises (2) Returns (2) (1): Lines beginning with <ident> [(<type>[, ...])]: are treated as argument/parameter or attribute/member declarations. Types listed inside the parenthesis (optional) are cross-linked, if possible. For attribute/member declarations, the identifier is typed in a monospace font. (2): Lines beginning with <type>[, ...]: are treated as raise/return type declarations and the type names are cross-linked, if possible. Lines following a name's description are considered part of the most recent documentation unless separated by another declaration or an empty line. <type> placeholders can also be tuples in the form (<type>[, ...]) .","title":"Sections"},{"location":"#code-blocks","text":"GitHub-style Markdown code-blocks with language annotations can be used. ```python >>> for i in range(100): ... ```","title":"Code Blocks"},{"location":"#changes","text":"","title":"Changes"},{"location":"#v210-2020-03-01","text":"Use yaml.safe_load() instead of yaml.load() to silence warning about unsafe operation (#87)","title":"v2.1.0 (2020-03-01)"},{"location":"#65-properly-loaded-docstring-for-classmethodstaticmethod","text":"","title":"65 &ndash; Properly loaded docstring for classmethod/staticmethod."},{"location":"#62-getting-descriptors-instance-instead-calling-its-get-method","text":"","title":"62 &ndash; getting descriptor's instance instead calling its get method."},{"location":"#61-pages-configuration-is-deprecated-in-mkdocs-100-mkdoc-dependency-bumped-to-100","text":"","title":"61 &ndash; 'pages' configuration is deprecated in MKDocs &gt; 1.0.0. MKDoc dependency bumped to &gt;=1.0.0."},{"location":"#63-pages-configuration-not-required-when-mkdocsyml-present","text":"Add newline before titles for plaintext visibility Arguments/Returns section is considered ended if an empty line is found Parse references and replace them with markdown links Pretty print function signature Add smart and google preprocessors","title":"63 &ndash; Pages configuration not required when mkdocs.yml present."},{"location":"#v205-2018-11-15","text":"Now copies all files from the docs_dir (to include images etc.) (see #56) Fix error with delayed imports changing dictionary size during iteration (see #57) Add headers option which can be of value 'html' or 'markdown' (see #55) Default headers option to 'markdown' in simple mode (see #59)","title":"v2.0.5 (2018-11-15)"},{"location":"#v204-2018-07-24","text":"Add -c key=value argument for generate and simple command Add filter=[\"docstring\"] option (#43) Fix regex for detecting cross-references (#44) Handle classes that don't define __init__() (PR#51) Add support for reStructuredText Markup (eg. :class:`MyClass` ) (PR#46, #1) Handle @property functions (PR#50)","title":"v2.0.4 (2018-07-24)"},{"location":"#v203","text":"Fix #41, #36, #31 Merged #39","title":"v2.0.3"},{"location":"#v202","text":"Fix #25 -- Text is incorrectly rendered as code Fix #26 -- Broken links for URLs with fragment identifiers No longer transforms titles in a docstring that are indented (eg. to avoid an indented code block with a # comment to be corrupted)","title":"v2.0.2"},{"location":"#v201","text":"Support additional_search_path key in configuration Render headers as HTML <hX> tags rather than Markdown tags, so we assign a proper ID to them Fix #21 -- AttributeError: 'module' object has no attribute 'signature' Now requires the six module FIx #22 -- No blank space after header does not render codeblocks","title":"v2.0.1"},{"location":"#v200","text":"Complete overhaul of pydoc-markdown employing MkDocs and the Markdown module. Copyright \u00a9 2017-2018 Niklas Rosenstein","title":"v2.0.0"},{"location":"document/","text":"pydocmd.document This module implements the structural representation of an API documentation in separate documents and symbolic names. The final documentation is rendered from this structured representation. Section Section(doc, identifier=None, title=None, depth=1, content=None, header_type='html') A section represents a part of a Document . It contains Markdown-formatted content that will be rendered into a file at some point. Attributes doc (Document) : The document that the section belongs to. identifier (str, None) : The globally unique identifier of the section. This identifier usually matches the name of the element that the section describes (eg. a class or function) and will be used for cross-referencing. title (str, None) : The title of the section. If specified, it will be rendered before section.content and the header-size will depend on the section.depth . depth (int) : The depth of the section, defaults to 1. Currently only affects the header-size that is rendered for the section.title . content (str) : The Markdown-formatted content of the section. index Returns the Index that this section is associated with, accessed via section.document . render Section.render(stream) Render the section into stream . Document Document(index, url) Represents a single document that may contain several s . Every document must have a relative URL associated with it. Attributes index (Index) : The index that the document belongs to. url (str) : The relative URL of the document. Index Index() The index manages all documents and sections globally. It keeps track of the symbolic names allocated for the sections to be able to link to them from other sections. Attributes documents (dict) : sections (dict) : new_document Index.new_document(filename, url=None) Create a new document. Arguments filename (str) : The filename of the document. Must end with .md . url (str) : The relative URL of the document. If omitted, will be automatically deduced from filename (same without the .md suffix). Raises ValueError : If filename does not end with .md . ValueError : If filename is not a relative path. ValueError : If a document with the specified filename already exists. new_section Index.new_section(doc, *args, **kwargs) Create a new section in the specified document. The arguments for this method match the parameters for the Section constructor. Raises ValueError : If the section identifier is already used.","title":"Document"},{"location":"imp/","text":"pydocmd.imp This module provides utilities for importing Python objects by name. import_module import_module(name) Imports a Python module assuming that the whole name identifies only a Python module and no symbol inside a Python module. import_object import_object(name) Like import_object_with_scope() but returns only the object. import_object_with_scope import_object_with_scope(name) Imports a Python object by an absolute identifier. Arguments name (str) : The name of the Python object to import. Returns (any, Module) : The object and the module that contains it. Note that for plain modules loaded with this function, both elements of the tuple may be the same object. force_lazy_import force_lazy_import(name) Import any modules off of \"name\" by iterating a new list rather than a generator so that this library works with lazy imports.","title":"Import Utils"},{"location":"extensions/loader/","text":"pydocmd.loader This module provides implementations to load documentation information from an identifier as it is specified in the pydocmd.yml:generate configuration key. A loader basically takes care of loading the documentation content for that name, but is not supposed to apply preprocessing. PythonLoader PythonLoader(config) Expects absolute identifiers to import with import_object_with_scope() . load_section PythonLoader.load_section(section) Loads the contents of a Section . The section.identifier is the name of the object that we need to load. Arguments section (Section) : The section to load. Fill the section.title and section.content values. Optionally, section.loader_context can be filled with custom arbitrary data to reference at a later point.","title":"Loader"},{"location":"extensions/preprocessors/","text":"pydocmd.preprocessors","title":"Preprocessors"}]}