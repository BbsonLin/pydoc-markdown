{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pydoc-Markdown Pydoc-Markdown is a tool to create Python API documentation in markdown format based on lib2to3 . Features Parses the AST instead of running your code Understands multiple documentation styles (Sphinx, Google, Pydoc-Markdown) Resolves cross-references of the form #PetType.CAT Supports attribute docstrings ( #: ... before or string literals after the statement) Mkdocs integration Cross-page (and cross-project) links in API documentation) [Work in progress] On the roadmap Support for images (#94) Understand fixmes and hints in the source code (eg. # doc: ignore ) Installation Using Pipx is recommended to avoid dependency clashes that can occur when installing multiple command-line tools into a single environment. $ pipx install 'pydoc-markdown>=3.0.0,<4.0.0' For the cutting-edge version, you can install Pydoc-Markdown directly from GitHub: $ pipx install git+https://github.com/NiklasRosenstein/pydoc-markdown.git@develop Usage On the CLI you specify either the name of a configuration file or provide a YAML formatted configuration. If you do not specify any arguments, the default configuration file is loaded ( pydoc-markdown.ya?ml ). $ pydoc-markdown [<config>] The configuration is composed of three main components: A list of loaders, a list of documentation processors and a renderer. The default configuration is defined as follows: loaders: - type: python processors: - type: filter - type: smart - type: crossref renderer: - type: markdown It is automatically applied when using the Pydoc-Markdown CLI to render Markdown documentation for Python modules on the fly (without a YAML configuration file). Example: $ cat <<EOF >a.py def say_hello(name: str): \"\"\" Says hello to the person specified with *name*. :param name: The person to say hello to. :raises ValueError: If *name* is empty. :returns: Nothing \"\"\" # ... EOF $ pydoc-markdown -m a -I . Expand to see the generated Markdown --- ## a #### say\\_hello say_hello(name: str) Says hello to the person specified with *name*. **Arguments**: - `name`: The person to say hello to. **Raises**: - `ValueError`: If *name* is empty. **Returns**: Nothing --- To jumpstart your documentation endavours, try running pydoc-markdown --bootstrap or pydoc-markdown --bootsrap-mkdocs to generate a template configuration file. If a configuration file exists, then the CLI needs to be invoked without arguments, or with one argument that specifies the path to the configuration file. When using the mkdocs renderer, you may add the --server and --open arguments for smooth live-feedback. $ pydoc-markdown ./pydoc-markdown.yaml --server --open lib2to3 Quirks Pydoc-Markdown doesn't execute your Python code but instead relies on the lib2to3 parser. This means it also inherits any quirks of lib2to3 . List of known quirks A function argument in Python 3 cannot be called print even though it is legal syntax Releasing Releases are automatically published from CircleCI.","title":"Home"},{"location":"#pydoc-markdown","text":"Pydoc-Markdown is a tool to create Python API documentation in markdown format based on lib2to3 . Features Parses the AST instead of running your code Understands multiple documentation styles (Sphinx, Google, Pydoc-Markdown) Resolves cross-references of the form #PetType.CAT Supports attribute docstrings ( #: ... before or string literals after the statement) Mkdocs integration Cross-page (and cross-project) links in API documentation) [Work in progress] On the roadmap Support for images (#94) Understand fixmes and hints in the source code (eg. # doc: ignore )","title":"Pydoc-Markdown"},{"location":"#installation","text":"Using Pipx is recommended to avoid dependency clashes that can occur when installing multiple command-line tools into a single environment. $ pipx install 'pydoc-markdown>=3.0.0,<4.0.0' For the cutting-edge version, you can install Pydoc-Markdown directly from GitHub: $ pipx install git+https://github.com/NiklasRosenstein/pydoc-markdown.git@develop","title":"Installation"},{"location":"#usage","text":"On the CLI you specify either the name of a configuration file or provide a YAML formatted configuration. If you do not specify any arguments, the default configuration file is loaded ( pydoc-markdown.ya?ml ). $ pydoc-markdown [<config>] The configuration is composed of three main components: A list of loaders, a list of documentation processors and a renderer. The default configuration is defined as follows: loaders: - type: python processors: - type: filter - type: smart - type: crossref renderer: - type: markdown It is automatically applied when using the Pydoc-Markdown CLI to render Markdown documentation for Python modules on the fly (without a YAML configuration file). Example: $ cat <<EOF >a.py def say_hello(name: str): \"\"\" Says hello to the person specified with *name*. :param name: The person to say hello to. :raises ValueError: If *name* is empty. :returns: Nothing \"\"\" # ... EOF $ pydoc-markdown -m a -I . Expand to see the generated Markdown --- ## a #### say\\_hello say_hello(name: str) Says hello to the person specified with *name*. **Arguments**: - `name`: The person to say hello to. **Raises**: - `ValueError`: If *name* is empty. **Returns**: Nothing --- To jumpstart your documentation endavours, try running pydoc-markdown --bootstrap or pydoc-markdown --bootsrap-mkdocs to generate a template configuration file. If a configuration file exists, then the CLI needs to be invoked without arguments, or with one argument that specifies the path to the configuration file. When using the mkdocs renderer, you may add the --server and --open arguments for smooth live-feedback. $ pydoc-markdown ./pydoc-markdown.yaml --server --open","title":"Usage"},{"location":"#lib2to3-quirks","text":"Pydoc-Markdown doesn't execute your Python code but instead relies on the lib2to3 parser. This means it also inherits any quirks of lib2to3 . List of known quirks A function argument in Python 3 cannot be called print even though it is legal syntax","title":"lib2to3 Quirks"},{"location":"#releasing","text":"Releases are automatically published from CircleCI.","title":"Releasing"},{"location":"changelog/","text":"Changelog v3.0.3 (unreleased) Rename --watch-and-serve to --server Update MarkdownRenderer defaults for descriptive_class_title and descriptive_class_title Added MkdocsRenderer.content_directory (defaults to content , used to be docs before) Renamed MkdocsRenderer.clean_docs_directory_on_render to .clean_render and make it default to False Fixed --server option, now reloads the PydocMarkdown config, does no open the browser again and again Changed: MkdocsRenderer.mkdocs_config can be set to null , the renderer will then refrain from writing a mkdocs.yml configuration file into the output directory v3.0.2 (2020-05-16) Fix NameError in MkdocsRenderer v3.0.1 (2020-05-16) Added --version option to pydoc-markdown command. Added -p,--package option to the pydoc-markdown command (which overrides the PythonLoader.packages field). Added pydoc_markdown.util.page module Added pydoc_markdown.__main__.RenderSession class which makes the cli logic easier to maintain and re-use. Added hidden MarkdownRenderer.fp option. Added PythonLoader.packages which will load the specified Python package including all sub-packages and -modules. Changed behavior of PythonLoader.modules , which will now only load the module that was explictly specified and not sub-packages or modules (note that this also affects the -m,--module command-line option) Dynamically lookup MarkdownRenderer configuration from the configured renderer such that renderers other than the MarkdownRenderer and MkdocsRenderer that embed a MarkdownRenderer can benefit from command-line level overrides like --render-toc v3.0.0 (2020-05-12) Initial release of Pydoc-markdown v3","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v303-unreleased","text":"Rename --watch-and-serve to --server Update MarkdownRenderer defaults for descriptive_class_title and descriptive_class_title Added MkdocsRenderer.content_directory (defaults to content , used to be docs before) Renamed MkdocsRenderer.clean_docs_directory_on_render to .clean_render and make it default to False Fixed --server option, now reloads the PydocMarkdown config, does no open the browser again and again Changed: MkdocsRenderer.mkdocs_config can be set to null , the renderer will then refrain from writing a mkdocs.yml configuration file into the output directory","title":"v3.0.3 (unreleased)"},{"location":"changelog/#v302-2020-05-16","text":"Fix NameError in MkdocsRenderer","title":"v3.0.2 (2020-05-16)"},{"location":"changelog/#v301-2020-05-16","text":"Added --version option to pydoc-markdown command. Added -p,--package option to the pydoc-markdown command (which overrides the PythonLoader.packages field). Added pydoc_markdown.util.page module Added pydoc_markdown.__main__.RenderSession class which makes the cli logic easier to maintain and re-use. Added hidden MarkdownRenderer.fp option. Added PythonLoader.packages which will load the specified Python package including all sub-packages and -modules. Changed behavior of PythonLoader.modules , which will now only load the module that was explictly specified and not sub-packages or modules (note that this also affects the -m,--module command-line option) Dynamically lookup MarkdownRenderer configuration from the configured renderer such that renderers other than the MarkdownRenderer and MkdocsRenderer that embed a MarkdownRenderer can benefit from command-line level overrides like --render-toc","title":"v3.0.1 (2020-05-16)"},{"location":"changelog/#v300-2020-05-12","text":"Initial release of Pydoc-markdown v3","title":"v3.0.0 (2020-05-12)"},{"location":"getting-started/","text":"Getting started Todo","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Todo","title":"Getting started"},{"location":"api-documentation/cli/","text":"","title":"CLI"},{"location":"api-documentation/interfaces/","text":"Loader Objects class Loader(Interface) This interface describes an object that is capable of loading documentation data. The location from which the documentation is loaded must be defined with the configuration class. load | load(graph) Fill the ModuleGraph . Processor Objects class Processor(Interface) A processor is an object that takes a ModuleGraph object as an input and transforms it in an arbitrary way. This usually processes docstrings to convert from various documentation syntaxes to plain Markdown. Resolver Objects class Resolver(Interface) A resolver can be used by a Processor to replace cross references with a hyperlink. Renderer Objects class Renderer(Processor) A renderer is an object that takes a ModuleGraph as an input and produces output files or writes to stdout. It may also expose additional command-line arguments. There can only be one renderer at the end of the processor chain. Note that sometimes a renderer may need to perform some processing before the render step. To keep the possibility open that a renderer may implement generic processing that could be used without the actual renderering functionality, Renderer is a subclass of Processor . Server Objects class Server(Interface) This interface describes an object that can start a server process for live-viewing generated documentation in the browser. Renderer implementations may additionally implement this interface to advocate their compatibility with the --server and --open options of the pydoc-markdown CLI. reload_server | @default | reload_server(process: subprocess.Popen) -> subprocess.Popen Called when the files generated by pydoc-markdown have been updated. This gives the implementation a chance to reload the server process. The default implementation returns the process unchanged. Returning None will automatically call start_server() afterwards.","title":"Interfaces"},{"location":"api-documentation/interfaces/#loader-objects","text":"class Loader(Interface) This interface describes an object that is capable of loading documentation data. The location from which the documentation is loaded must be defined with the configuration class.","title":"Loader Objects"},{"location":"api-documentation/interfaces/#load","text":"| load(graph) Fill the ModuleGraph .","title":"load"},{"location":"api-documentation/interfaces/#processor-objects","text":"class Processor(Interface) A processor is an object that takes a ModuleGraph object as an input and transforms it in an arbitrary way. This usually processes docstrings to convert from various documentation syntaxes to plain Markdown.","title":"Processor Objects"},{"location":"api-documentation/interfaces/#resolver-objects","text":"class Resolver(Interface) A resolver can be used by a Processor to replace cross references with a hyperlink.","title":"Resolver Objects"},{"location":"api-documentation/interfaces/#renderer-objects","text":"class Renderer(Processor) A renderer is an object that takes a ModuleGraph as an input and produces output files or writes to stdout. It may also expose additional command-line arguments. There can only be one renderer at the end of the processor chain. Note that sometimes a renderer may need to perform some processing before the render step. To keep the possibility open that a renderer may implement generic processing that could be used without the actual renderering functionality, Renderer is a subclass of Processor .","title":"Renderer Objects"},{"location":"api-documentation/interfaces/#server-objects","text":"class Server(Interface) This interface describes an object that can start a server process for live-viewing generated documentation in the browser. Renderer implementations may additionally implement this interface to advocate their compatibility with the --server and --open options of the pydoc-markdown CLI.","title":"Server Objects"},{"location":"api-documentation/interfaces/#reload_server","text":"| @default | reload_server(process: subprocess.Popen) -> subprocess.Popen Called when the files generated by pydoc-markdown have been updated. This gives the implementation a chance to reload the server process. The default implementation returns the process unchanged. Returning None will automatically call start_server() afterwards.","title":"reload_server"},{"location":"api-documentation/loaders/","text":"PythonLoader Objects class PythonLoader(Struct) This implementation of the Loader interface parses Python modules and packages. Which files are parsed depends on the configuration (see PythonLoaderConfig ). If no modules or packages are set, the loader will attempt to find packages in the src/ folder of the current directory.","title":"Loaders"},{"location":"api-documentation/loaders/#pythonloader-objects","text":"class PythonLoader(Struct) This implementation of the Loader interface parses Python modules and packages. Which files are parsed depends on the configuration (see PythonLoaderConfig ). If no modules or packages are set, the loader will attempt to find packages in the src/ folder of the current directory.","title":"PythonLoader Objects"},{"location":"api-documentation/processors/","text":"GoogleProcessor Objects class GoogleProcessor(Struct) This class implements the preprocessor for Google and PEP 257 docstrings. https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/ FilterProcessor Objects class FilterProcessor(Struct) The filter processor removes module and class members based on certain criteria. Example - type: filter expression: not name.startswith('_') and default()","title":"Processors"},{"location":"api-documentation/processors/#googleprocessor-objects","text":"class GoogleProcessor(Struct) This class implements the preprocessor for Google and PEP 257 docstrings. https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html https://www.python.org/dev/peps/pep-0257/","title":"GoogleProcessor Objects"},{"location":"api-documentation/processors/#filterprocessor-objects","text":"class FilterProcessor(Struct) The filter processor removes module and class members based on certain criteria. Example - type: filter expression: not name.startswith('_') and default()","title":"FilterProcessor Objects"},{"location":"api-documentation/reflection/","text":"ModuleGraph Objects class ModuleGraph(Object): | ModuleGraph(nodes=()) Represents a collection of Objects , typically Modules . resolve_ref | resolve_ref(scope: Object, ref: List[str]) -> Optional[Object] Resolve a reference to another object from within the specified scope . Returns the target, or None if the target cannot be resolved from the ref. The ref must be a list of names that can be retrieved from the scope's members in order. If no scope is specified, it will be resolved inside the ModuleGraph .","title":"Reflection"},{"location":"api-documentation/reflection/#modulegraph-objects","text":"class ModuleGraph(Object): | ModuleGraph(nodes=()) Represents a collection of Objects , typically Modules .","title":"ModuleGraph Objects"},{"location":"api-documentation/reflection/#resolve_ref","text":"| resolve_ref(scope: Object, ref: List[str]) -> Optional[Object] Resolve a reference to another object from within the specified scope . Returns the target, or None if the target cannot be resolved from the ref. The ref must be a list of names that can be retrieved from the scope's members in order. If no scope is specified, it will be resolved inside the ModuleGraph .","title":"resolve_ref"},{"location":"api-documentation/renderers/markdownrenderer/","text":"MarkdownRenderer Objects class MarkdownRenderer(Struct) fp Can be used to explicitly specify a file object to render to. filename The name of the file to render to. If no file is specified, it will render to stdout. encoding The encoding of the output file. This is ignored when rendering to stdout. insert_header_anchors If enabled, inserts anchors before Markdown headers to ensure that links to the header work. This is enabled by default. html_headers Generate HTML headers instead of Mearkdown headers. This is disabled by default. code_headers Render names in headers as code (using backticks or <code> tags, depending on html_headers ). This is enabled by default. descriptive_class_title Generate descriptive class titles by adding the word \"Objects\" after the class name. This is enabled by default. descriptive_module_title Generate descriptivie module titles by adding the word \"Module\" before the module name. This is enabled by default. add_method_class_prefix Add the class name as a prefix to method names. This class name is also rendered as code if code_headers is enabled. This is enabled by default. add_member_class_prefix Add the class name as a prefix to member names. This is enabled by default. add_full_prefix Add the full module name as a prefix to the title of the header. This is disabled by default. sub_prefix If add_full_prefix is enabled, this will result in the prefix to be wrapped in a <sub> tag. data_code_block Render the definition of data members as a code block. This is disabled by default. data_expression_maxlength Max length of expressions. If this limit is exceeded, the remaining characters will be replaced with three dots. This is set to 100 by default. classdef_code_block Render the class signature as a code block. This includes the \"class\" keyword, the class name and its bases. This is enabled by default. classdef_render_init_signature_if_needed Render the constructor signature in the class definition code block if it's __init__() member is not visible. signature_python_help_style Render classdef and function signature blocks in the Python help() style. signature_code_block Render the function signature as a code block. This includes the \"def\" keyword, the function name and its arguments. This is enabled by default. signature_in_header Render the function signature in the header. This is disabled by default. signature_with_def Include the \"def\" keyword in the function signature. This is enabled by default. signature_class_prefix Render the class name in the code block for function signature. Note that this results in invalid Python syntax to be rendered. This is disabled by default. code_lang Add the string \"python\" after the backticks for code blocks. This is enabled by default. render_toc Render a table of contents at the beginning of the file. render_toc_title The title of the \"Table of Contents\" header. toc_maxdepth The maximum depth of the table of contents. Defaults to 2. render_module_header Render module headers. This is enabled by default. docstrings_as_blockquote Render docstrings as blockquotes. This is disabled by default. use_fixed_header_levels Use a fixed header level for every kind of API object. The individual levels can be defined with header_level_by_type . header_level_by_type Fixed header levels by API object type.","title":"MarkdownRenderer"},{"location":"api-documentation/renderers/markdownrenderer/#markdownrenderer-objects","text":"class MarkdownRenderer(Struct)","title":"MarkdownRenderer Objects"},{"location":"api-documentation/renderers/markdownrenderer/#fp","text":"Can be used to explicitly specify a file object to render to.","title":"fp"},{"location":"api-documentation/renderers/markdownrenderer/#filename","text":"The name of the file to render to. If no file is specified, it will render to stdout.","title":"filename"},{"location":"api-documentation/renderers/markdownrenderer/#encoding","text":"The encoding of the output file. This is ignored when rendering to stdout.","title":"encoding"},{"location":"api-documentation/renderers/markdownrenderer/#insert_header_anchors","text":"If enabled, inserts anchors before Markdown headers to ensure that links to the header work. This is enabled by default.","title":"insert_header_anchors"},{"location":"api-documentation/renderers/markdownrenderer/#html_headers","text":"Generate HTML headers instead of Mearkdown headers. This is disabled by default.","title":"html_headers"},{"location":"api-documentation/renderers/markdownrenderer/#code_headers","text":"Render names in headers as code (using backticks or <code> tags, depending on html_headers ). This is enabled by default.","title":"code_headers"},{"location":"api-documentation/renderers/markdownrenderer/#descriptive_class_title","text":"Generate descriptive class titles by adding the word \"Objects\" after the class name. This is enabled by default.","title":"descriptive_class_title"},{"location":"api-documentation/renderers/markdownrenderer/#descriptive_module_title","text":"Generate descriptivie module titles by adding the word \"Module\" before the module name. This is enabled by default.","title":"descriptive_module_title"},{"location":"api-documentation/renderers/markdownrenderer/#add_method_class_prefix","text":"Add the class name as a prefix to method names. This class name is also rendered as code if code_headers is enabled. This is enabled by default.","title":"add_method_class_prefix"},{"location":"api-documentation/renderers/markdownrenderer/#add_member_class_prefix","text":"Add the class name as a prefix to member names. This is enabled by default.","title":"add_member_class_prefix"},{"location":"api-documentation/renderers/markdownrenderer/#add_full_prefix","text":"Add the full module name as a prefix to the title of the header. This is disabled by default.","title":"add_full_prefix"},{"location":"api-documentation/renderers/markdownrenderer/#sub_prefix","text":"If add_full_prefix is enabled, this will result in the prefix to be wrapped in a <sub> tag.","title":"sub_prefix"},{"location":"api-documentation/renderers/markdownrenderer/#data_code_block","text":"Render the definition of data members as a code block. This is disabled by default.","title":"data_code_block"},{"location":"api-documentation/renderers/markdownrenderer/#data_expression_maxlength","text":"Max length of expressions. If this limit is exceeded, the remaining characters will be replaced with three dots. This is set to 100 by default.","title":"data_expression_maxlength"},{"location":"api-documentation/renderers/markdownrenderer/#classdef_code_block","text":"Render the class signature as a code block. This includes the \"class\" keyword, the class name and its bases. This is enabled by default.","title":"classdef_code_block"},{"location":"api-documentation/renderers/markdownrenderer/#classdef_render_init_signature_if_needed","text":"Render the constructor signature in the class definition code block if it's __init__() member is not visible.","title":"classdef_render_init_signature_if_needed"},{"location":"api-documentation/renderers/markdownrenderer/#signature_python_help_style","text":"Render classdef and function signature blocks in the Python help() style.","title":"signature_python_help_style"},{"location":"api-documentation/renderers/markdownrenderer/#signature_code_block","text":"Render the function signature as a code block. This includes the \"def\" keyword, the function name and its arguments. This is enabled by default.","title":"signature_code_block"},{"location":"api-documentation/renderers/markdownrenderer/#signature_in_header","text":"Render the function signature in the header. This is disabled by default.","title":"signature_in_header"},{"location":"api-documentation/renderers/markdownrenderer/#signature_with_def","text":"Include the \"def\" keyword in the function signature. This is enabled by default.","title":"signature_with_def"},{"location":"api-documentation/renderers/markdownrenderer/#signature_class_prefix","text":"Render the class name in the code block for function signature. Note that this results in invalid Python syntax to be rendered. This is disabled by default.","title":"signature_class_prefix"},{"location":"api-documentation/renderers/markdownrenderer/#code_lang","text":"Add the string \"python\" after the backticks for code blocks. This is enabled by default.","title":"code_lang"},{"location":"api-documentation/renderers/markdownrenderer/#render_toc","text":"Render a table of contents at the beginning of the file.","title":"render_toc"},{"location":"api-documentation/renderers/markdownrenderer/#render_toc_title","text":"The title of the \"Table of Contents\" header.","title":"render_toc_title"},{"location":"api-documentation/renderers/markdownrenderer/#toc_maxdepth","text":"The maximum depth of the table of contents. Defaults to 2.","title":"toc_maxdepth"},{"location":"api-documentation/renderers/markdownrenderer/#render_module_header","text":"Render module headers. This is enabled by default.","title":"render_module_header"},{"location":"api-documentation/renderers/markdownrenderer/#docstrings_as_blockquote","text":"Render docstrings as blockquotes. This is disabled by default.","title":"docstrings_as_blockquote"},{"location":"api-documentation/renderers/markdownrenderer/#use_fixed_header_levels","text":"Use a fixed header level for every kind of API object. The individual levels can be defined with header_level_by_type .","title":"use_fixed_header_levels"},{"location":"api-documentation/renderers/markdownrenderer/#header_level_by_type","text":"Fixed header levels by API object type.","title":"header_level_by_type"},{"location":"api-documentation/renderers/mkdocsrenderer/","text":"MkdocsRenderer Objects class MkdocsRenderer(Struct) output_directory The output directory for the generated Markdown files. Defaults to build/docs . content_directory_name Name of the content directory. Defaults to \"content\". clean_render Delete the content directory in the output_directory before rendering. Note that this does not play well with pre-existing content, as it will be deleted as well. Defaults to False. pages The pages to render into the output directory. markdown Markdown renderer settings. site_name The name of the site. This will be carried into the site_name key of the mkdocs_config . mkdocs_config Arbitrary configuration values that will be rendered to an mkdocs.yml file. get_resolver | @override | get_resolver(graph: ModuleGraph) -> Optional[Resolver] TODO (@NiklasRosenstein): The resolver returned by the Markdown renderer does not implement linking across multiple pages. reload_server | @override | reload_server(process: subprocess.Popen) While MkDocs does support file watching and automatic reloading, it appears to be a bit quirky. Let's just restart the whole process.","title":"MkdocsRenderer"},{"location":"api-documentation/renderers/mkdocsrenderer/#mkdocsrenderer-objects","text":"class MkdocsRenderer(Struct)","title":"MkdocsRenderer Objects"},{"location":"api-documentation/renderers/mkdocsrenderer/#output_directory","text":"The output directory for the generated Markdown files. Defaults to build/docs .","title":"output_directory"},{"location":"api-documentation/renderers/mkdocsrenderer/#content_directory_name","text":"Name of the content directory. Defaults to \"content\".","title":"content_directory_name"},{"location":"api-documentation/renderers/mkdocsrenderer/#clean_render","text":"Delete the content directory in the output_directory before rendering. Note that this does not play well with pre-existing content, as it will be deleted as well. Defaults to False.","title":"clean_render"},{"location":"api-documentation/renderers/mkdocsrenderer/#pages","text":"The pages to render into the output directory.","title":"pages"},{"location":"api-documentation/renderers/mkdocsrenderer/#markdown","text":"Markdown renderer settings.","title":"markdown"},{"location":"api-documentation/renderers/mkdocsrenderer/#site_name","text":"The name of the site. This will be carried into the site_name key of the mkdocs_config .","title":"site_name"},{"location":"api-documentation/renderers/mkdocsrenderer/#mkdocs_config","text":"Arbitrary configuration values that will be rendered to an mkdocs.yml file.","title":"mkdocs_config"},{"location":"api-documentation/renderers/mkdocsrenderer/#get_resolver","text":"| @override | get_resolver(graph: ModuleGraph) -> Optional[Resolver] TODO (@NiklasRosenstein): The resolver returned by the Markdown renderer does not implement linking across multiple pages.","title":"get_resolver"},{"location":"api-documentation/renderers/mkdocsrenderer/#reload_server","text":"| @override | reload_server(process: subprocess.Popen) While MkDocs does support file watching and automatic reloading, it appears to be a bit quirky. Let's just restart the whole process.","title":"reload_server"}]}